import "std/common.orb";

mac std.getElemTy (list::preprocess) {
    ret (attrOf (typeOf list) std.elemTy);
};

mac std.getLen (list::preprocess) {
    sym (elemTy (std.getElemTy list));
    ret \(std.getArrPtrDist ,elemTy ([] ,list -end) ([] ,list -start));
};

mac std.getCap (list::preprocess) {
    sym (elemTy (std.getElemTy list));
    ret \(std.getArrPtrDist ,elemTy ([] ,list -bound) ([] ,list -start));
};

mac std.isEmpty (list::preprocess) {
    ret \(== ([] ,list -start) ([] ,list -end));
};

mac std.[] (list::preprocess ind::preprocess) {
    ret \([] ,list -start ,ind);
};

mac std.getFront (list::preprocess) {
    ret \([] ,list -start 0);
};

mac std.getBack (list::preprocess) {
    ret \([] ,list -end -1);
};

mac std.getArrPtr (list::preprocess) {
    ret \(unref ([] ,list -start));
};

mac std.range (it list::preprocess body) {
    base.assertIsOfType it id;

    sym (i (genId));

    ret \(block {
        eval (sym (,it (pat { ret (escape (std.[] ,list ,i)); })));
        range ,i (std.getLen ,list) ,body;
    });
};

mac std.rangeRev (it list::preprocess body) {
    base.assertIsOfType it id;

    sym (i (genId));

    ret \(block {
        eval (sym (,it (pat { ret (escape (std.[] ,list ,i)); })));
        rangeRev ,i (std.getLen ,list) ,body;
    });
};

eval (fnc std.List (elemTy:type defineDrop:bool) type {
    sym (name (+ \std.List (cast id elemTy)));

    if (! (?? ,name)) {
        data::global ,name {
            -start:(elemTy [])
            -end:(elemTy [])
            -bound:(elemTy [])
        }::((std.class std.List) (std.elemTy ,elemTy))
            (cond defineDrop
                (std.defineDrop ,name)
                (fnc::global std.-dropList::(compilable (evaluable false)) (this:,name::noDrop) ()));
    };

    ret (name);
});

eval (fnc std.List (elemTy:type) type {
    ret (std.List elemTy true);
});

mac (+ \std.-defineDrop \std.List) (listTy::preprocess) {
    # define function here and return it (intentionally not escaped)
    ret (fnc::global std.-dropList::(compilable (evaluable false)) (this:listTy::noDrop) () {
        # TODO due to CPU caching, iterating in reverse may be slower (same for arrays/tuples/data types?)
        std.rangeRev it this {
            >>::noZero (it);
        };
        free (cast ptr ([] this -start));
    });
};

mac std.makeList (elemTy::preprocess len::preprocess) {
    base.assertIsOfType elemTy type;

    sym (listTy (std.List elemTy));

    ret \(block ,listTy {
        sym x:,listTy;
        # TODO check if setting all bytes to zero portably zeroes any type
        = ([] x -start) (std.calloc ,elemTy ,len);
        = ([] x -end) ([] x -bound) (std.getArrPtrToInd ,elemTy ([] x -start) ,len);
        pass x;
    });
};

mac std.makeListWith (elemTy::preprocess elem::preprocess rest::(variadic preprocess)) {
    base.assertIsOfType elemTy type;

    sym (elems (+ \(,elem) rest));

    sym (listTy (std.List elemTy));

    sym (innerCode \{
        sym x:,listTy;
        = ([] x -start) (std.malloc ,elemTy ,(lenOf elems));
        = ([] x -end) ([] x -bound) (std.getArrPtrToInd ,elemTy ([] x -start) ,(lenOf elems));
    });

    range i (lenOf elems) {
        = innerCode (+ innerCode \{
            = ([] x -start ,i)::noDrop ,([] elems i);
        });
    };

    = innerCode (+ innerCode \{
        pass x;
    });

    ret \(block ,listTy ,innerCode);
};

mac std.-genFncList (name args retTy body) {
    sym (macArgsPastFirst \());
    repeat (lenOf args) {
        = macArgsPastFirst (+ macArgsPastFirst \(,(genId)::preprocess));
    };

    sym (fncArgs (+ \(this:((typeOf list) *)) args))
        (macArgs (+ \(list::preprocess) macArgsPastFirst));

    ret \(mac ,name ,macArgs {
        sym (elemTy (std.getElemTy list));
        sym (genName (+ (escape ,name) (cast id elemTy)));

        if (! (?? (passthrough genName))) {
            fnc::global (passthrough genName)::(compilable (evaluable false)) ,fncArgs ,retTy ,body;
        };

        ret ,(+ \(base.makeRawWith genName (base.makeRawWith (escape &) list)) macArgsPastFirst);
    });
};

std.-genFncList std.-reallocForCap (cap:std.Size) () {
    sym (elemTy::evaluated (std.getElemTy (* this)));
    sym (oldLen (std.getLen (* this)));

    = (-> this -start) (std.realloc (-> this -start) elemTy cap);
    = (-> this -end) (std.getArrPtrToInd elemTy (-> this -start) oldLen);
    = (-> this -bound) (std.getArrPtrToInd elemTy (-> this -start) cap);
};

mac std.-reallocForCapOrOver (list::preprocess cap::preprocess) {
    ret \(block {
        sym (newCap (* 2 (std.getCap ,list)));
        if (> ,cap newCap) { = newCap ,cap; };
        std.-reallocForCap ,list newCap;
    });
};

std.-genFncList std.resize (len:std.Size) () {
    sym (elemTy::evaluated (std.getElemTy (* this)));
    sym (oldLen (std.getLen (* this)));

    if (> len oldLen) {
        if (> len (std.getCap (* this))) {
            std.-reallocForCapOrOver (* this) len;
        };
        sym (ptrPastOldLen (std.getArrPtrToInd elemTy (-> this -start) oldLen));
        std.setElemsToZero elemTy ptrPastOldLen (- len oldLen);
    } (< len oldLen) {
        rangeRev i (- oldLen 1) len {
            >>::noZero (std.[] (* this) i);
        };
    };
    = (-> this -end) (std.getArrPtrToInd elemTy (-> this -start) len);
};

std.-genFncList std.reserve (cap:std.Size) () {
    if (< (std.getCap (* this)) cap) {
        std.-reallocForCap (* this) cap;
    };
};

std.-genFncList std.-push (elem:elemTy) () {
    sym (elemTy::evaluated (std.getElemTy (* this)));

    if (== (-> this -end) (-> this -bound)) {
        std.-reallocForCapOrOver (* this) (+ (std.getCap (* this)) 1);
    };
    = (* (cast (elemTy *) (-> this -end)))::noDrop (>> elem);
    = (-> this -end) (std.getArrPtrToInd elemTy (-> this -end) 1);
};

mac std.push (list::preprocess elem::preprocess rest::(variadic preprocess)) {
    sym (innerCode \{ std.-push ,list ,elem; });

    range i (lenOf rest) {
        = innerCode (+ innerCode \{ std.-push ,list ,([] rest i); });
    };

    ret \(block::bare ,innerCode);
};

std.-genFncList std.pop () () {
    sym (elemTy::evaluated (std.getElemTy (* this)));

    = (-> this -end) (std.getArrPtrToInd elemTy (-> this -end) -1);
    >>::noZero ([] (-> this -end) 0);
};

std.-genFncList std.clear () () {
    sym (oldLen (std.getLen (* this)));
    = (-> this -end) (-> this -start);
    rangeRev i oldLen {
        >>::noZero ([] (-> this -start) i);
    };
};